task :push => [:clean, :test_clean] do |t|
	puts "\nPushing to ec2 node\n"
	
	begin
		sh "./push.sh"
	rescue Exception
		fail "\nPushing to ec2 node Failed\n"
	end

end

task :run => [:detect_bin] do |t|
	puts "\nRunning Binary...\n"
	
	fail("target not set") if @target.nil?
	
	begin
		sh "./bin/#{@target}/release/elog < email.txt"
	rescue Exception
		fail "\nRunning Binary Failed\n"
	end

end

task :detect_bin => [:detect_toolset] do |t|
	puts "\nDetecting Binary...\n"
	
	fail("toolset not set") if @toolset.nil?
	
	@target = determine_target(@toolset)
	
	puts "\nTarget is \"#{@target}\"\n"
	
	begin
		result = sh "ls ./bin/#{@target}/release/elog"
	rescue Exception
		fail "\nBinary not detected, here's a suggestion run \"rake build\" first!\n"
	end
end

task :build => [:clean] do |t|
	puts "\nBuilding...\n"
	
	fail("toolset not set") if @toolset.nil?
	
	result = sh "bjam release debug toolset=#{@toolset}"
	
	display_result(result, "Building")
	
end

task :clean => [:detect_toolset] do |t|
	puts "\nCleaning...\n"
	
	fail("toolset not set") if @toolset.nil?

	result = sh "bjam --clean release debug toolset=#{@toolset}"
	
	display_result(result, "Cleaning")

end

task :detect_toolset do |t|
	puts "\nDetecting toolset...\n"

	result = `uname`
	
	result = result.strip
	
	if result == "Darwin"
		@toolset = "darwin"
	elsif result == "Linux"
		@toolset = "gcc"
	else
		fail("Not able to detect environment to set toolset")
	end
	
	puts "Toolset: #{@toolset} detected"
	
end

task :coverage => [:test] do |t|
	puts "\n Running Coverage...\n"
	
	fail("toolset not set") if @toolset.nil?

	@target = determine_target(@toolset)

	fail("target not set") if @target.nil? || @target == ""
	
	begin
		result = sh "cd test; gcov ../*.cpp -o bin/#{@target}/debug/;"
	rescue Exception
		fail("\nFailure building and running tests")
	end
	
	
end

task :test => [:test_clean] do |t|
	puts "\nRunning tests...\n"
	
	fail("toolset not set") if @toolset.nil?

	@target = determine_target(@toolset)

	fail("target not set") if @target.nil? || @target == ""
	

	begin
		result = sh "cd test; bjam release debug toolset=#{@toolset}; ./bin/#{@target}/debug/test_all"
	rescue Exception
		fail("\nFailure building and running tests")
	end
end

task :test_clean => [:detect_toolset] do |t|
	puts "\nCleaning tests...\n"
	
	fail("toolset not set") if @toolset.nil?

	@target = determine_target(@toolset)

	fail("target not set") if @target.nil? || @target == ""
	

	begin
		result = sh "cd test; bjam release --clean debug toolset=#{@toolset}; rm -f bin/#{@target}/debug/*; rm -f bin/#{@target}/release/*;"
	rescue Exception
		fail("\nFailure building and running tests")
	end
end

def display_result(result, action)
	if result
		puts "\n#{action} succeeded\n"
	else
		puts "\n#{action} failed\n"
		fail
	end
end

def determine_target(toolset = "")
	target = ""
	if toolset == "darwin"
		version = `g++ -dumpversion`
		target = "darwin-#{version.strip}"
	else @toolset == "gcc"
		version = `g++ -dumpversion`
		target = "gcc-#{version.strip}"
	end
	return target
end

